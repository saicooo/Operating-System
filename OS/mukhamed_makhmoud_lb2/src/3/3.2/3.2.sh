#!/bin/bash
# =========================== НАЗНАЧЕНИЕ ===========================
# Демонстрация работы функций wait() и waitpid() для отслеживания
# завершения дочерних процессов:
#
# 1. Анализ значения, возвращаемого функцией wait(&status)
# 2. Демонстрация связи между wait() и сигналом SIGCHLD
# 3. Эксперимент с использованием waitpid() для отслеживания
#    подмножества порожденных потомков
#
# Программа показывает как родительский процесс может контролировать
# завершение дочерних процессов и получать информацию о них через
# различные функции ожидания.
# ==================================================================
# 
# ============================ КОМАНДЫ =============================
# Скрипт выполняет следующие действия:
# 1. Создаёт пустой лог-файл для записи результатов (3.2.log)
# 2. Компилирует программы father, son1, son2, son3
# 3. Запускает родительский процесс, который создаёт дочерние процессы
# 4. Родительский процесс демонстрирует использование wait() и waitpid()
# 5. Записывает результаты выполнения и возвращаемые значения в лог-файл
# 6. Выводит содержимое лог-файла для анализа
# 7. Удаляет временные исполняемые файлы (очистка)
# ==================================================================
# 

DIRECTORY="3/3.2"
LOGFILE="3.2.log"

SRC_FILES=("father.c" "son1.c" "son2.c" "son3.c")
EXEC=("father" "son1" "son2" "son3")

compilate_files() {
    local -n src_files=$1
    local -n obj_files=$2

    local count=${#src_files[@]}
    for ((i=0; i<"$count"; i++)); do
        gcc "${src_files[$i]}" -o "${obj_files[$i]}"
    done
}

cd "$DIRECTORY"
> "$LOGFILE"

compilate_files SRC_FILES EXEC

./"${EXEC[0]}" &>> "$LOGFILE"

cat "$LOGFILE"

rm "${EXEC[@]}"