#!/bin/bash
# =========================== НАЗНАЧЕНИЕ ===========================
# Анализ политик планирования и приоритетов процессов в Linux:
#
# 1. Определение политики планирования и приоритета процесса по умолчанию 
#    из shell и через программный интерфейс
# 2. Анализ очередности выполнения процессов с одинаковым приоритетом
# 3. Исследование влияния изменения приоритета процесса на его выполнение
#
# Скрипт демонстрирует работу планировщика процессов Linux и показывает,
# как разные приоритеты влияют на распределение процессорного времени.
# ==================================================================
# 
# ============================ КОМАНДЫ =============================
# Скрипт выполняет следующие действия:
# 1. Компилирует исходные файлы: schedule.c, prog1.c, prog2.c, prog3.c
# 2. Запускает программу prog1 и получает информацию о её политике
#    планирования из командной строки (ps)
# 3. Запускает программу schedule для определения параметров планирования
#    программным способом
# 4. Анализирует очередность выполнения процессов prog2 и prog3 с одинаковым
#    приоритетом, подсчитывая процент выполнения каждого
# 5. Анализирует очередность выполнения процессов с разными приоритетами
#    (используя nice и taskset), подсчитывая процент выполнения каждого
# 6. Логирует результаты в файл 5.1.log и выводит статистику выполнения
#
# Вывод: Политика планирования SCHED_OTHER использует алгоритм справедливого 
# разделения процессорного времени с учетом приоритетов процессов.
# Чем ниже значение nice (отрицательные значения), тем больше процессорного
# времени получает процесс. При одинаковых приоритетах время распределяется
# примерно поровну между всеми процессами на одном ядре CPU.
# ==================================================================
# 

DIRECTORY="5/5.1"

SRC_FILES=("prog1.c" "prog2.c" "prog3.c" "prog4.c" "schedule.c")
EXEC=("prog1" "prog2" "prog3" "prog4" "schedule")
PRIORITIES=("0" "0" "0" "0")

compilate_files() {
    local -n src_files=$1
    local -n obj_files=$2

    local count=${#src_files[@]}
    for ((i=0; i<"$count"; i++)); do
        gcc "${src_files[$i]}" -o "${obj_files[$i]}"
    done
}

cd "$DIRECTORY"

compilate_files SRC_FILES EXEC

echo -e "\n==== Определение политики планирования и приоритета из shell ===="
./"${EXEC[0]}" "0" &

echo -e "\n==== Информация о процессе $! ===="
ps -p $! -o pid,nice,cls,comm
echo

wait # ожидаем заверешения процесса

echo
echo -e "\n==== Определение политики планирования и приоритета программно ===="
./"${EXEC[${#EXEC[@]}-1]}" &

sleep 1 # даем время на вывод информации

echo
echo -e "\n===== Запуск процессов с политикой SCHED_OTHER с одинаковым приоритетом =====\n"
for ((i=0; i < ${#EXEC[@]}-1; i++)); do
    echo "Запуск процесса: "${EXEC[$i]}", приоритет: "${PRIORITIES[$i]}""
    taskset -c 0 ./"${EXEC[$i]}" "${PRIORITIES[$i]}" &
done

wait # ожидаем завершения процессов

echo
echo -e "\n===== Запуск процессов с политикой SCHED_OTHER с различным приоритетом =====\n"

PRIORITIES=("10" "5" "-5" "-10")
for ((i=0; i < ${#EXEC[@]}-1; i++)); do
    echo "Запуск процесса: "${EXEC[$i]}", приоритет: "${PRIORITIES[$i]}""
    taskset -c 0 ./"${EXEC[$i]}" "${PRIORITIES[$i]}" &
done

wait # ожидаем завершения процессов

rm "${EXEC[@]}"