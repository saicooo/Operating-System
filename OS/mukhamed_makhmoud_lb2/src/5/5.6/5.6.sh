#!/bin/bash
# =========================== НАЗНАЧЕНИЕ ===========================
# Исследование планирования потоков в Linux с различными политиками 
# планирования и приоритетами:
#
# 1. Определение политики планирования потоков по умолчанию
# 2. Изучение влияния изменения политики планирования для всех потоков
#    одного процесса с равными приоритетами
# 3. Сравнение поведения потоков с разными политиками планирования
#    (SCHED_OTHER, SCHED_RR, SCHED_FIFO)
# 4. Анализ влияния разных приоритетов на потоки одного процесса
# 5. Сравнение поведения потоков независимых процессов с разными приоритетами
#
# Результаты эксперимента показывают:
# - Политика по умолчанию для потоков - SCHED_OTHER с приоритетом 0
# - Политики реального времени (SCHED_FIFO, SCHED_RR) имеют преимущество 
#   над стандартной политикой (SCHED_OTHER) независимо от приоритета
# - При SCHED_FIFO для потоков одного процесса, несмотря на разные приоритеты,
#   родительский поток с низким приоритетом (10) выполняется перед дочерним
#   потоком с высоким приоритетом (99)
# - Для потоков независимых процессов с SCHED_FIFO выполнение происходит
#   в соответствии с приоритетом (высокий приоритет выполняется первым)
# - Это показывает, что поведение потоков одного процесса отличается от
#   поведения потоков разных процессов при использовании одной и той же
#   политики планирования
# ==================================================================
# 
# ============================ КОМАНДЫ =============================
# Скрипт выполняет следующие действия:
# 1. Компилирует исходный файл prog.c, содержащий код для тестирования
#    различных аспектов планирования потоков
# 2. Запускает скомпилированную программу, которая выполняет следующие тесты:
#    - Определяет политику планирования потоков по умолчанию (SCHED_OTHER)
#    - Изменяет политику планирования для всех потоков одного процесса на SCHED_FIFO
#    - Запускает 3 потока с разными политиками (SCHED_OTHER, SCHED_RR, SCHED_FIFO)
#      для демонстрации приоритетности разных политик
#    - Запускает 2 потока одного процесса с разными приоритетами (10 и 99) 
#      с политикой SCHED_FIFO
#    - Запускает 2 потока независимых процессов с разными приоритетами (10 и 99)
#      с политикой SCHED_FIFO для сравнения с предыдущим тестом
# 3. Использует taskset -c 0 для привязки всех процессов к одному ядру CPU,
#    чтобы обеспечить конкуренцию между ними
# 4. Очищает скомпилированные файлы после завершения работы
#
# Выводы:
# - Политики SCHED_FIFO и SCHED_RR имеют преимущество над SCHED_OTHER
# - Для потоков одного процесса с SCHED_FIFO порядок выполнения потоков
#   определяется их приоритетом
# - Для независимых процессов c SCHED_FIFO порядок выполения не зависит от
#   приоритета (порядок выполнения определяется порядком запуска)
# ==================================================================
# 

DIRECTORY="5/5.6"

SRC_FILES=("prog.c")
EXEC=("prog")

compilate_files() {
    local -n src_files=$1
    local -n obj_files=$2

    local count=${#src_files[@]}
    for ((i=0; i<"$count"; i++)); do
        gcc "${src_files[$i]}" -o "${obj_files[$i]}"
    done
}

cd "$DIRECTORY"

compilate_files SRC_FILES EXEC

taskset -c 0 ./"${EXEC[${#EXEC[@]}-1]}" &

wait

rm "${EXEC[@]}"