#!/bin/bash
# =========================== НАЗНАЧЕНИЕ ===========================
# Исследование планирования процессов в Linux с использованием политики FIFO:
#
# 1. Изучение порядка предоставления процессора при одинаковых приоритетах
#    для процессов с политикой FIFO
# 2. Определение границ приоритетов для различных политик планирования
#    (FIFO, RR, OTHER)
# 3. Анализ влияния разных значений приоритетов на очередность исполнения 
#    процессов при политике FIFO
# 4. Демонстрация работы функций sched_setscheduler и sched_getparam для
#    управления политиками планирования процессов
#
# Скрипт наглядно показывает работу планировщика процессов в Linux
# при использовании политики планирования реального времени FIFO.
# ==================================================================
# 
# ============================ КОМАНДЫ =============================
# Скрипт выполняет следующие действия:
# 1. Компилирует исходные файлы prog1.c, prog2.c и limits.c
# 2. Запускает два процесса с одинаковым приоритетом (35) и политикой FIFO
#    на одном процессорном ядре (taskset -c 0) для анализа очередности
#    выполнения
# 3. Запускает те же процессы с разными приоритетами (70 и 10) для 
#    демонстрации влияния приоритета на порядок планирования
# 4. Выводит информацию о границах приоритетов для различных политик
#    планирования (SCHED_FIFO, SCHED_RR, SCHED_OTHER)
# 5. Очищает скомпилированные файлы после завершения работы
#
# Вывод: Политика планирования SCHED_FIFO представляет собой алгоритм 
# планирования «first in - first out» с вытеснением на основе приоритетов.
# При одинаковых приоритетах процессы выполняются последовательно в порядке их запуска,
# каждый процесс полностью завершает свою работу, прежде чем CPU будет предоставлен следующему.
# При разных приоритетах процессы выполняются строго в порядке убывания приоритета,
# независимо от порядка их запуска.
# Диапазон приоритетов для SCHED_FIFO составляет от 1 до 99.
# ==================================================================
#

DIRECTORY="5/5.3"

SRC_FILES=("prog1.c" "prog2.c" "prog3.c" "prog4.c" "limits.c")
EXEC=("prog1" "prog2" "prog3" "prog4" "limits")
PRIORITIES=("35" "35" "35" "35")

compilate_files() {
    local -n src_files=$1
    local -n obj_files=$2

    local count=${#src_files[@]}
    for ((i=0; i<"$count"; i++)); do
        gcc "${src_files[$i]}" -o "${obj_files[$i]}"
    done
}

cd "$DIRECTORY"

compilate_files SRC_FILES EXEC

echo -e "\n===== Запуск процессов с политикой FIFO с одинаковым приоритетом =====\n"
for ((i=0; i < ${#EXEC[@]}-1; i++)); do
    echo "Запуск процесса: "${EXEC[$i]}", приоритет: "${PRIORITIES[$i]}""
    taskset -c 0 ./"${EXEC[$i]}" "${PRIORITIES[$i]}" &
done

# Ожидаем завершения всех фоновых процессов, запущенных в текущем сеансе оболочки
wait

echo
echo -e "\n===== Запуск процессов с политикой FIFO с разным приоритетом =====\n"
PRIORITIES=("70" "10" "5" "90")
for ((i=0; i < ${#EXEC[@]}-1; i++)); do
    echo "Запуск процесса: "${EXEC[$i]}", приоритет: "${PRIORITIES[$i]}""
    taskset -c 0 ./"${EXEC[$i]}" "${PRIORITIES[$i]}" &
done

# Ожидаем завершения всех фоновых процессов, запущенных в текущем сеансе оболочки
wait

echo
echo -e "\n===== Границы различных приоритетов =====\n"
./"${EXEC[${#EXEC[@]}-1]}"

rm "${EXEC[@]}"