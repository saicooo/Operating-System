#!/bin/bash
# =========================== НАЗНАЧЕНИЕ ===========================
# Демонстрация различных сценариев завершения родственных процессов
# и их влияния на состояние процессов в операционной системе:
#
# Сценарий (а): Нормальное завершение процесса
#   - Процесс-отец запускает процесс-сын и ожидает завершения сына
#   - Демонстрирует корректное освобождение ресурсов
#
# Сценарий (б): Смена родителя (потомок становится "сиротой")
#   - Процесс-отец запускает процесс-сын и завершается раньше сына
#   - Демонстрирует "усыновление" сироты процессом init/systemd (PPID=1)
#
# Сценарий (в): Возникновение процесса-зомби (defunct)
#   - Процесс-отец запускает процесс-сын и не ожидает его завершения
#   - Процесс-сын завершается, но его статус не собирается родителем
#   - Ресурсы не освобождаются до завершения родителя
# ==================================================================
# 
# ============================ КОМАНДЫ =============================
# Скрипт выполняет следующие действия для каждого сценария:
# 1. Компилирует программы father.c и son.c
# 2. Запускает программу father с соответствующим аргументом (a, b, c)
# 3. Записывает результаты выполнения в лог-файл (2.4.log)
# 4. Выводит содержимое лог-файла на экран для анализа результатов
# 5. Удаляет временные исполняемые файлы
#
# Для вывода состояния процессов используется команда ps -l:
# F: флаги процесса
# S: состояние процесса (R=выполняется, S=спит, Z=зомби)
# UID: ID пользователя-владельца
# PID: ID процесса
# PPID: ID родительского процесса
# PRI/NI: приоритет и nice-значение
# VSZ/RSS: размер виртуальной памяти и резидентный размер
# ==================================================================
# 

DIRECTORY="2/2.4"
LOGFILE="2.4.log"

SRC_FILES=("father.c" "son.c")
EXEC=("father" "son")

compilate_files() {
    local -n src_files=$1
    local -n obj_files=$2

    local count=${#src_files[@]}
    for ((i=0; i<"$count"; i++)); do
        gcc "${src_files[$i]}" -o "${obj_files[$i]}"
    done
}

cd "$DIRECTORY"
> "$LOGFILE"

compilate_files SRC_FILES EXEC

echo "==== Случай (а): отец ожидает завершения сына ====" >> "$LOGFILE"
./"${EXEC[0]}" a &>> "$LOGFILE"
echo "" >> "$LOGFILE"


echo "==== Случай (б): отец завершается раньше сына ====" >> "$LOGFILE"
./"${EXEC[0]}" b &>> "$LOGFILE"

# Ждем, чтобы дать сыну время завершиться
sleep 2

echo "" >> "$LOGFILE"


echo "==== Случай (в): потомок стал зомби ====" >> "$LOGFILE"
./"${EXEC[0]}" c &>> "$LOGFILE"
echo "" >> "$LOGFILE"

cat "$LOGFILE"

rm "${EXEC[@]}"