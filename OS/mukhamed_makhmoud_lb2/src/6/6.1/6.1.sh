#!/bin/bash
# =========================== НАЗНАЧЕНИЕ ===========================
# Исследование наследования файловых дескрипторов на этапах fork() и exec().
#
# 1. Тест 6.1.1: Проверка наследования файловых дескрипторов при fork().
#    Родительский процесс открывает файл, записывает в него данные, затем
#    создает потомка через fork(). Потомок продолжает запись в тот же файл.
#    После этого родитель завершает запись.
#
# 2. Тест 6.1.2: Проверка наследования файловых дескрипторов при exec().
#    Родительский процесс открывает файл, записывает в него данные, затем
#    создает потомка через fork(), который выполняет exec() для запуска
#    другой программы. Эта программа продолжает запись в тот же файл.
#
# ==================================================================
# 
# ============================ КОМАНДЫ =============================
# Скрипт выполняет следующие действия:
# 1. Компилирует исходные файлы father.c и son.c, создавая исполняемые файлы
#    father и son.
# 2. Запускает программу father, которая выполняет оба теста:
#    - Тест 6.1.1: fork() - запись в файл родителем и потомком.
#    - Тест 6.1.2: exec() - запись в файл родителем и программой, запущенной
#      через exec().
# 3. Ожидает завершения всех процессов.
# 4. Удаляет скомпилированные исполняемые файлы после завершения работы.
#
# Выводы:
# - Файловые дескрипторы наследуются при fork(), что позволяет родителю и потомку
#   записывать в один и тот же файл.
# - Файловые дескрипторы сохраняются после exec(), если они не были закрыты или
#   переопределены, что позволяет новой программе продолжать запись в файл.
# ==================================================================
# 

DIRECTORY="6/6.1"

SRC_FILES=("son.c" "father.c")
EXEC=("son" "father")

compilate_files() {
    local -n src_files=$1
    local -n obj_files=$2

    local count=${#src_files[@]}
    for ((i=0; i<"$count"; i++)); do
        gcc "${src_files[$i]}" -o "${obj_files[$i]}"
    done
}

cd "$DIRECTORY"

compilate_files SRC_FILES EXEC

./"${EXEC[${#EXEC[@]}-1]}" &

wait

rm "${EXEC[@]}"